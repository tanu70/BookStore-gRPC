// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bookstore_proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bookstore_5fproto_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_bookstore_5fproto_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_bookstore_5fproto_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bookstore_5fproto_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_bookstore_5fproto_2eproto;
namespace store {
class BookInfo;
struct BookInfoDefaultTypeInternal;
extern BookInfoDefaultTypeInternal _BookInfo_default_instance_;
class BookList;
struct BookListDefaultTypeInternal;
extern BookListDefaultTypeInternal _BookList_default_instance_;
class GetReq;
struct GetReqDefaultTypeInternal;
extern GetReqDefaultTypeInternal _GetReq_default_instance_;
}  // namespace store
PROTOBUF_NAMESPACE_OPEN
template <>
::store::BookInfo* Arena::CreateMaybeMessage<::store::BookInfo>(Arena*);
template <>
::store::BookList* Arena::CreateMaybeMessage<::store::BookList>(Arena*);
template <>
::store::GetReq* Arena::CreateMaybeMessage<::store::GetReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace store {

// ===================================================================


// -------------------------------------------------------------------

class GetReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:store.GetReq) */ {
 public:
  inline GetReq() : GetReq(nullptr) {}
  ~GetReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetReq(const GetReq& from);
  GetReq(GetReq&& from) noexcept
    : GetReq() {
    *this = ::std::move(from);
  }

  inline GetReq& operator=(const GetReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReq& operator=(GetReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReq* internal_default_instance() {
    return reinterpret_cast<const GetReq*>(
               &_GetReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetReq& a, GetReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetReq& from) {
    GetReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "store.GetReq";
  }
  protected:
  explicit GetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookIdFieldNumber = 1,
  };
  // int32 book_id = 1;
  void clear_book_id() ;
  ::int32_t book_id() const;
  void set_book_id(::int32_t value);

  private:
  ::int32_t _internal_book_id() const;
  void _internal_set_book_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:store.GetReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t book_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bookstore_5fproto_2eproto;
};// -------------------------------------------------------------------

class BookInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:store.BookInfo) */ {
 public:
  inline BookInfo() : BookInfo(nullptr) {}
  ~BookInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BookInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookInfo(const BookInfo& from);
  BookInfo(BookInfo&& from) noexcept
    : BookInfo() {
    *this = ::std::move(from);
  }

  inline BookInfo& operator=(const BookInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookInfo& operator=(BookInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookInfo* internal_default_instance() {
    return reinterpret_cast<const BookInfo*>(
               &_BookInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BookInfo& a, BookInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BookInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookInfo& from) {
    BookInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "store.BookInfo";
  }
  protected:
  explicit BookInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookTitleFieldNumber = 2,
    kAuthorFieldNumber = 3,
    kBookIdFieldNumber = 1,
  };
  // string book_title = 2;
  void clear_book_title() ;
  const std::string& book_title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_book_title(Arg_&& arg, Args_... args);
  std::string* mutable_book_title();
  PROTOBUF_NODISCARD std::string* release_book_title();
  void set_allocated_book_title(std::string* ptr);

  private:
  const std::string& _internal_book_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_book_title(
      const std::string& value);
  std::string* _internal_mutable_book_title();

  public:
  // string author = 3;
  void clear_author() ;
  const std::string& author() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_author(Arg_&& arg, Args_... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* ptr);

  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(
      const std::string& value);
  std::string* _internal_mutable_author();

  public:
  // int32 book_id = 1;
  void clear_book_id() ;
  ::int32_t book_id() const;
  void set_book_id(::int32_t value);

  private:
  ::int32_t _internal_book_id() const;
  void _internal_set_book_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:store.BookInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr book_title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
    ::int32_t book_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bookstore_5fproto_2eproto;
};// -------------------------------------------------------------------

class BookList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:store.BookList) */ {
 public:
  inline BookList() : BookList(nullptr) {}
  ~BookList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BookList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookList(const BookList& from);
  BookList(BookList&& from) noexcept
    : BookList() {
    *this = ::std::move(from);
  }

  inline BookList& operator=(const BookList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookList& operator=(BookList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookList& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookList* internal_default_instance() {
    return reinterpret_cast<const BookList*>(
               &_BookList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BookList& a, BookList& b) {
    a.Swap(&b);
  }
  inline void Swap(BookList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookList& from) {
    BookList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "store.BookList";
  }
  protected:
  explicit BookList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookListFieldNumber = 1,
  };
  // repeated .store.BookInfo bookList = 1;
  int booklist_size() const;
  private:
  int _internal_booklist_size() const;

  public:
  void clear_booklist() ;
  ::store::BookInfo* mutable_booklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::store::BookInfo >*
      mutable_booklist();
  private:
  const ::store::BookInfo& _internal_booklist(int index) const;
  ::store::BookInfo* _internal_add_booklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::store::BookInfo>& _internal_booklist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::store::BookInfo>* _internal_mutable_booklist();
  public:
  const ::store::BookInfo& booklist(int index) const;
  ::store::BookInfo* add_booklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::store::BookInfo >&
      booklist() const;
  // @@protoc_insertion_point(class_scope:store.BookList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::store::BookInfo > booklist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bookstore_5fproto_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetReq

// int32 book_id = 1;
inline void GetReq::clear_book_id() {
  _impl_.book_id_ = 0;
}
inline ::int32_t GetReq::book_id() const {
  // @@protoc_insertion_point(field_get:store.GetReq.book_id)
  return _internal_book_id();
}
inline void GetReq::set_book_id(::int32_t value) {
  _internal_set_book_id(value);
  // @@protoc_insertion_point(field_set:store.GetReq.book_id)
}
inline ::int32_t GetReq::_internal_book_id() const {
  return _impl_.book_id_;
}
inline void GetReq::_internal_set_book_id(::int32_t value) {
  ;
  _impl_.book_id_ = value;
}

// -------------------------------------------------------------------

// BookInfo

// int32 book_id = 1;
inline void BookInfo::clear_book_id() {
  _impl_.book_id_ = 0;
}
inline ::int32_t BookInfo::book_id() const {
  // @@protoc_insertion_point(field_get:store.BookInfo.book_id)
  return _internal_book_id();
}
inline void BookInfo::set_book_id(::int32_t value) {
  _internal_set_book_id(value);
  // @@protoc_insertion_point(field_set:store.BookInfo.book_id)
}
inline ::int32_t BookInfo::_internal_book_id() const {
  return _impl_.book_id_;
}
inline void BookInfo::_internal_set_book_id(::int32_t value) {
  ;
  _impl_.book_id_ = value;
}

// string book_title = 2;
inline void BookInfo::clear_book_title() {
  _impl_.book_title_.ClearToEmpty();
}
inline const std::string& BookInfo::book_title() const {
  // @@protoc_insertion_point(field_get:store.BookInfo.book_title)
  return _internal_book_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BookInfo::set_book_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.book_title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:store.BookInfo.book_title)
}
inline std::string* BookInfo::mutable_book_title() {
  std::string* _s = _internal_mutable_book_title();
  // @@protoc_insertion_point(field_mutable:store.BookInfo.book_title)
  return _s;
}
inline const std::string& BookInfo::_internal_book_title() const {
  return _impl_.book_title_.Get();
}
inline void BookInfo::_internal_set_book_title(const std::string& value) {
  ;


  _impl_.book_title_.Set(value, GetArenaForAllocation());
}
inline std::string* BookInfo::_internal_mutable_book_title() {
  ;
  return _impl_.book_title_.Mutable( GetArenaForAllocation());
}
inline std::string* BookInfo::release_book_title() {
  // @@protoc_insertion_point(field_release:store.BookInfo.book_title)
  return _impl_.book_title_.Release();
}
inline void BookInfo::set_allocated_book_title(std::string* value) {
  _impl_.book_title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.book_title_.IsDefault()) {
          _impl_.book_title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:store.BookInfo.book_title)
}

// string author = 3;
inline void BookInfo::clear_author() {
  _impl_.author_.ClearToEmpty();
}
inline const std::string& BookInfo::author() const {
  // @@protoc_insertion_point(field_get:store.BookInfo.author)
  return _internal_author();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BookInfo::set_author(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.author_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:store.BookInfo.author)
}
inline std::string* BookInfo::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:store.BookInfo.author)
  return _s;
}
inline const std::string& BookInfo::_internal_author() const {
  return _impl_.author_.Get();
}
inline void BookInfo::_internal_set_author(const std::string& value) {
  ;


  _impl_.author_.Set(value, GetArenaForAllocation());
}
inline std::string* BookInfo::_internal_mutable_author() {
  ;
  return _impl_.author_.Mutable( GetArenaForAllocation());
}
inline std::string* BookInfo::release_author() {
  // @@protoc_insertion_point(field_release:store.BookInfo.author)
  return _impl_.author_.Release();
}
inline void BookInfo::set_allocated_author(std::string* value) {
  _impl_.author_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.author_.IsDefault()) {
          _impl_.author_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:store.BookInfo.author)
}

// -------------------------------------------------------------------

// BookList

// repeated .store.BookInfo bookList = 1;
inline int BookList::_internal_booklist_size() const {
  return _impl_.booklist_.size();
}
inline int BookList::booklist_size() const {
  return _internal_booklist_size();
}
inline void BookList::clear_booklist() {
  _internal_mutable_booklist()->Clear();
}
inline ::store::BookInfo* BookList::mutable_booklist(int index) {
  // @@protoc_insertion_point(field_mutable:store.BookList.bookList)
  return _internal_mutable_booklist()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::store::BookInfo >*
BookList::mutable_booklist() {
  // @@protoc_insertion_point(field_mutable_list:store.BookList.bookList)
  return _internal_mutable_booklist();
}
inline const ::store::BookInfo& BookList::_internal_booklist(int index) const {
  return _internal_booklist().Get(index);
}
inline const ::store::BookInfo& BookList::booklist(int index) const {
  // @@protoc_insertion_point(field_get:store.BookList.bookList)
  return _internal_booklist(index);
}
inline ::store::BookInfo* BookList::_internal_add_booklist() {
  return _internal_mutable_booklist()->Add();
}
inline ::store::BookInfo* BookList::add_booklist() {
  ::store::BookInfo* _add = _internal_add_booklist();
  // @@protoc_insertion_point(field_add:store.BookList.bookList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::store::BookInfo >&
BookList::booklist() const {
  // @@protoc_insertion_point(field_list:store.BookList.bookList)
  return _internal_booklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::store::BookInfo>&
BookList::_internal_booklist() const {
  return _impl_.booklist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::store::BookInfo>*
BookList::_internal_mutable_booklist() {
  return &_impl_.booklist_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace store


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_bookstore_5fproto_2eproto_2epb_2eh
